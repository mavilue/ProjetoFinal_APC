import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from datetime import date
import time

from data_handler import formatar_valor, salvar_dados, carregar_dados
from transactions import init_session, add_transaction
from utils import calcular_saldo

# Configura a apar√™ncia e informa√ß√µes da p√°gina
st.set_page_config(page_title="Controle de Gastos", page_icon="üí∞", layout="centered")

# T√≠tulo principal da aplica√ß√£o
st.title("üí∞ CONTROLE DE GASTOS PESSOAIS")
# Inicializa a sess√£o (cria as vari√°veis se ainda n√£o existirem)
init_session()
# Cabe√ßalho da se√ß√£o de entrada de dados
st.subheader("‚ûï Adicionar nova movimenta√ß√£o")
# Campo de sele√ß√£o para categoria da movimenta√ß√£o
categoria = st.selectbox(
    "Categoria",
    ["Selecione", "Alimenta√ß√£o", "Transporte", "Moradia", "Sa√∫de", "Educa√ß√£o",
     "Sal√°rio", "Renda extra", "Investimento", "Servi√ßos digitais", "Lazer", "Cuidados pessoais", "Outros"]
)
# Escolha entre Receita ou Despesa
tipo_mov = st.radio("Tipo de movimenta√ß√£o", ["Receita", "Despesa"])
# Campo num√©rico para o valor da movimenta√ß√£o
valor = st.number_input("Valor (R$)", min_value=0.0, format="%.2f")
# Campo de texto para descri√ß√£o opcional
descricao = st.text_area("Descri√ß√£o")
# Campo de data (por padr√£o usa a data atual)
data = st.date_input("Data", value=date.today())
data_format = data.strftime("%d/%m/%Y")  # Formata a data no padr√£o brasileiro

# Quando o bot√£o √© pressionado
if st.button("Adicionar"):
    # Verifica se todos os campos foram preenchidos corretamente
    if categoria == "Selecione" or valor <= 0:
        st.warning("‚ö†Ô∏è Preencha todos os campos corretamente antes de adicionar.")
    else:
        # Adiciona os dados √† sess√£o
        add_transaction(categoria, tipo_mov, valor, descricao, data_format)
        st.success("‚úÖ Movimenta√ß√£o adicionada com sucesso!")

        # Salva os dados no arquivo CSV automaticamente
        df = pd.DataFrame(st.session_state['transactions'])
        salvar_dados(df)

        time.sleep(1)
        st.rerun()
        
# Cria um DataFrame com as transa√ß√µes salvas na sess√£o
df = pd.DataFrame(st.session_state['transactions'])

# Exibe o saldo atual se houver movimenta√ß√µes registradas
if not df.empty:
    saldo = calcular_saldo(st.session_state['transactions'])
    st.header(f"üí∏ Saldo Atual: R$ {saldo:.2f}")

# Exibe a tabela com todas as movimenta√ß√µes
st.subheader("Hist√≥rico de Movimenta√ß√µes")

# Ajusta o √≠ndice da tabela para come√ßar em 1
df.index = df.index + 1

# Formata a coluna de valores com R$ e separadores de milhar
df_estilizado = df.style.format({"VALOR": formatar_valor})

# Exibe a tabela estilizada
st.dataframe(df_estilizado)

# Se houver despesas, gera o gr√°fico de pizza por categoria
if not df.empty and "Despesa" in df["TIPO"].values:
    st.subheader("üìä Gastos por Categoria")
    despesas = df[df["TIPO"] == "Despesa"]  # Filtra apenas despesas
    categorias = despesas.groupby("CATEGORIA")["VALOR"].sum()  # Soma por categoria

    # Cria o gr√°fico de pizza
    fig, ax = plt.subplots()
    ax.pie(categorias, labels=categorias.index, autopct='%1.1f%%', startangle=90)
    ax.axis('equal')  # Deixa o gr√°fico circular
    ax.legend(categorias.index, title="Despesas", loc="center left", bbox_to_anchor=(1, 0, 0.5, 1))
    st.pyplot(fig)

# Bot√£o para carregar dados salvos do arquivo CSV
if st.button("üìÇ Carregar dados salvos"):
    novo_df = carregar_dados()
    if novo_df is not None:
        st.rerun()